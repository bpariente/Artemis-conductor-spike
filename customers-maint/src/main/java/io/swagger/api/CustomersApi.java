/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.0-SNAPSHOT).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.CreateCustomerBasicDataRequest;
import io.swagger.model.CreateCustomerBasicDataResponse;
import io.swagger.model.CreateCustomerContactDataRequest;
import io.swagger.model.CreateCustomerContactDataResponse;
import io.swagger.model.CreateLegalEntityRequest;
import io.swagger.model.CreateLegalEntityResponse;
import io.swagger.model.CreatePromotionCodeReservationRequest;
import io.swagger.model.GetCustomerAdditionalDataResponse;
import io.swagger.model.GetCustomerBasicDataResponse;
import io.swagger.model.GetCustomerContactDataResponse;
import io.swagger.model.GetCustomerEconomicEnvironmentResponse;
import io.swagger.model.GetCustomerExternalRelationTypeResponse;
import io.swagger.model.GetCustomerHouseholdCalculationResponse;
import io.swagger.model.GetCustomerPromotionCodesResponse;
import io.swagger.model.SearchCustomerDataResponse;
import io.swagger.model.UpdateCustomerBasicDataRequest;
import io.swagger.model.UpdateCustomerContactDataRequest;
import io.swagger.model.UpdateCustomerEconomicEnvironmentRequest;
import io.swagger.model.UpdateCustomerHouseholdCalculationRequest;
import io.swagger.annotations.*;
import java.util.Date;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2018-07-21T12:09:30.565+02:00")

@Api(value = "customers", description = "the customers API")
public interface CustomersApi {

    @ApiOperation(value = "Checks if the provided customer holds or can sign the given account", nickname = "checkAccountCustomerRelation", notes = "Retrieves ok if the customer holds or can sign the given account", tags={ "AccountCustomerRelation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Customer holds or can sign the given account"),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Customer account not found or customer does not hold the account"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/{customerEntity}-{customerNumber}/accounts/{iban}",
        produces = { "application/json" }, 
        method = RequestMethod.HEAD)
    ResponseEntity<Void> checkAccountCustomerRelation(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@Size(max=8) @ApiParam(value = "Customer Number",required=true) @PathVariable("customerNumber") String customerNumber,@ApiParam(value = "IBAN of the account to check",required=true) @PathVariable("iban") String iban);


    @ApiOperation(value = "Create Customer Basic Data", nickname = "createCustomerBasicData", notes = "Creates a Customer Basic Data; Calls P011", response = CreateCustomerBasicDataResponse.class, tags={ "CustomerBasicData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Empty response when successful creation", response = CreateCustomerBasicDataResponse.class),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Customer Basic Data is not updated"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreateCustomerBasicDataResponse> createCustomerBasicData(@ApiParam(value = "Create Customer Basic Data Request" ,required=true )  @Valid @RequestBody CreateCustomerBasicDataRequest wsRequest);


    @ApiOperation(value = "Create Person Contact Data Request", nickname = "createCustomerContactData", notes = "Creates a customer contact-data.", response = CreateCustomerContactDataResponse.class, tags={ "CustomerContactData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Create Customer Contact Data Response", response = CreateCustomerContactDataResponse.class),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Account not found"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/{customerEntity}-{customerNumber}/contacts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreateCustomerContactDataResponse> createCustomerContactData(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@Size(max=8) @ApiParam(value = "Customer Number",required=true) @PathVariable("customerNumber") String customerNumber,@ApiParam(value = "Create Person Contact Data Request" ,required=true )  @Valid @RequestBody CreateCustomerContactDataRequest wsRequest);


    @ApiOperation(value = "Create Person Economic Environment.", nickname = "createCustomerEconomicEnvironment", notes = "Creates economic environment data of a person.", tags={ "CustomerEconomicEnvironment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Person Economic Environment Created Successfully!"),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Account not found"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/{customerEntity}-{customerNumber}/economicenvironment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Void> createCustomerEconomicEnvironment(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@Size(max=8) @ApiParam(value = "Customer Number",required=true) @PathVariable("customerNumber") String customerNumber,@ApiParam(value = "Create Person Economic Environment Request" ,required=true )  @Valid @RequestBody UpdateCustomerEconomicEnvironmentRequest wsRequest);


    @ApiOperation(value = "Create Customer Basic Data for legal entity", nickname = "createLegalEntity", notes = "Creates a Customer Basic Data; Calls P011", response = CreateLegalEntityResponse.class, tags={ "CustomerBasicData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Empty response when successful creation", response = CreateLegalEntityResponse.class),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Customer Basic Data is not updated"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/legal",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<CreateLegalEntityResponse> createLegalEntity(@ApiParam(value = "Create Customer Basic Data Request" ,required=true )  @Valid @RequestBody CreateLegalEntityRequest wsRequest);


    @ApiOperation(value = "Create Promotion Code Reservation", nickname = "createPromotionCodeReservation", notes = "Create Promotion Code Reservation.", tags={ "CustomerReservePromotionCode", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Customer Promotion Code Created Successfully!"),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Customer Account not found"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/{customerEntity}-{customerNumber}/promotioncode",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> createPromotionCodeReservation(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@Size(max=8) @ApiParam(value = "Customer Number",required=true) @PathVariable("customerNumber") String customerNumber,@ApiParam(value = "Create Promotion Code Reservation Request" ,required=true )  @Valid @RequestBody CreatePromotionCodeReservationRequest wsRequest);


    @ApiOperation(value = "Find Customers", nickname = "findCustomers", notes = "Facilitates Customer Information Retrieval; Calls P027", response = SearchCustomerDataResponse.class, tags={ "FindCustomers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Contains the list of Customer Short Infos.", response = SearchCustomerDataResponse.class),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Account not found"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<SearchCustomerDataResponse> findCustomers(@NotNull @ApiParam(value = "Customer Surname", required = true) @Valid @RequestParam(value = "name", required = true) String name,@ApiParam(value = "Customer First Name") @Valid @RequestParam(value = "firstName", required = false) String firstName,@ApiParam(value = "Customer Birthdate") @Valid @RequestParam(value = "birthDate", required = false) Date birthDate,@ApiParam(value = "Customer Register Number") @Valid @RequestParam(value = "registerNumber", required = false) String registerNumber,@ApiParam(value = "Phonetic search flag") @Valid @RequestParam(value = "phoneticSearch", required = false) Boolean phoneticSearch,@ApiParam(value = "Postal Code") @Valid @RequestParam(value = "postalCode", required = false) String postalCode,@ApiParam(value = "Street") @Valid @RequestParam(value = "street", required = false) String street,@ApiParam(value = "OeNB Identification number") @Valid @RequestParam(value = "oenbId", required = false) String oenbId,@ApiParam(value = "1 Hostcall resembles 50 returned results") @Valid @RequestParam(value = "maxHostCalls", required = false) Integer maxHostCalls);


    @ApiOperation(value = "Retrieve Customer Additional Data", nickname = "getCustomerAdditionalData", notes = "", response = GetCustomerAdditionalDataResponse.class, tags={ "CustomerAdditionalData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieved Customer Addional Data like KOKU number, etc.", response = GetCustomerAdditionalDataResponse.class),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Additional Data not found. Probably customer does not exixt."),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/{customerEntity}-{customerNumber}/additionaldata",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetCustomerAdditionalDataResponse> getCustomerAdditionalData(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@Size(max=8) @ApiParam(value = "Customer Number",required=true) @PathVariable("customerNumber") String customerNumber);


    @ApiOperation(value = "Retrieve Customer Basic Data", nickname = "getCustomerBasicData", notes = "Returns Customer Basic Data; Calls P011", response = GetCustomerBasicDataResponse.class, tags={ "CustomerBasicData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieved Customer Basic Data based on the given request", response = GetCustomerBasicDataResponse.class),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Basic Data not found"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/{customerEntity}-{customerNumber}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetCustomerBasicDataResponse> getCustomerBasicData(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@Size(max=8) @ApiParam(value = "Customer Number",required=true) @PathVariable("customerNumber") String customerNumber);


    @ApiOperation(value = "Get Customer Contact Data List", nickname = "getCustomerContactData", notes = "Reads list of customer contact-data.", response = GetCustomerContactDataResponse.class, tags={ "CustomerContactData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Get Customer Contact Data Response (might be empty)", response = GetCustomerContactDataResponse.class),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Account not found"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/{customerEntity}-{customerNumber}/contacts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetCustomerContactDataResponse> getCustomerContactData(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@Size(max=8) @ApiParam(value = "Customer Number",required=true) @PathVariable("customerNumber") String customerNumber,@ApiParam(value = "") @Valid @RequestParam(value = "contactNumber", required = false) Integer contactNumber,@ApiParam(value = "") @Valid @RequestParam(value = "isActiveOnly", required = false) Boolean isActiveOnly,@ApiParam(value = "") @Valid @RequestParam(value = "isLatestOnly", required = false) Boolean isLatestOnly,@ApiParam(value = "") @Valid @RequestParam(value = "includeHidden", required = false) Boolean includeHidden);


    @ApiOperation(value = "Get Person Economic Environment", nickname = "getCustomerEconomicEnvironment", notes = "Retrieves the data related to Economic Environment.", response = GetCustomerEconomicEnvironmentResponse.class, tags={ "CustomerEconomicEnvironment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Get Person Economic Environment Response (might be empty)", response = GetCustomerEconomicEnvironmentResponse.class),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Account not found"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/{customerEntity}-{customerNumber}/economicenvironment",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetCustomerEconomicEnvironmentResponse> getCustomerEconomicEnvironment(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@Size(max=8) @ApiParam(value = "Customer Number",required=true) @PathVariable("customerNumber") String customerNumber,@ApiParam(value = "IBAN") @Valid @RequestParam(value = "iban", required = false) String iban,@ApiParam(value = "Workflow Process") @Valid @RequestParam(value = "YYWorkflowProcess", required = false) String yyWorkflowProcess);


    @ApiOperation(value = "Retrieve Customer External Relationship Type", nickname = "getCustomerExternalRelationshipType", notes = "Faciliates Customer External Relationship Type from MSA database", response = GetCustomerExternalRelationTypeResponse.class, tags={ "CustomerExternalRelationshipType", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieves list of found relation types for the given customer code, or empty if none found", response = GetCustomerExternalRelationTypeResponse.class),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Customer Promotion Data not found"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/{customerEntity}-{customerNumber}/externalrelations/{relationType}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetCustomerExternalRelationTypeResponse> getCustomerExternalRelationshipType(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@Size(max=8) @ApiParam(value = "Customer Number",required=true) @PathVariable("customerNumber") String customerNumber,@Size(max=10) @ApiParam(value = "Customer External Relationship Type",required=true) @PathVariable("relationType") String relationType);


    @ApiOperation(value = "Get Household Calculation", nickname = "getCustomerHouseholdCalculation", notes = "Retrieve the Customer household calculation data; Calls P051.", response = GetCustomerHouseholdCalculationResponse.class, tags={ "CustomerHouseholdCalculation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieved Customer Household Calculation based on the given request", response = GetCustomerHouseholdCalculationResponse.class),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Household calculation not found"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/{customerEntity}-{customerNumber}/householdcalculation",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetCustomerHouseholdCalculationResponse> getCustomerHouseholdCalculation(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@Size(max=8) @ApiParam(value = "Customer Number",required=true) @PathVariable("customerNumber") String customerNumber,@ApiParam(value = "IBAN") @Valid @RequestParam(value = "iban", required = false) String iban,@ApiParam(value = "Workflow Process") @Valid @RequestParam(value = "YYWorkflowProcess", required = false) String yyWorkflowProcess);


    @ApiOperation(value = "Retrieve Customer Promotions", nickname = "getCustomerPromotionCodes", notes = "Faciliates Customer Promotions Retrieval; Calls P127", response = GetCustomerPromotionCodesResponse.class, tags={ "CustomerPromotionCodes", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Retrieves list of found promotions for the given code, or empty if none found", response = GetCustomerPromotionCodesResponse.class),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Customer Promotion Data not found"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/promotions/{customerEntity}-{promotionCode}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<GetCustomerPromotionCodesResponse> getCustomerPromotionCodes(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@ApiParam(value = "Promotion Code",required=true) @PathVariable("promotionCode") String promotionCode);


    @ApiOperation(value = "Update Customer Basic Data", nickname = "updateCustomerBasicData", notes = "Updates the Customer Basic Data; Calls P011", tags={ "CustomerBasicData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Customer Basic Data Updated Successfully!"),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Customer Basic Data is not updated"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/{customerEntity}-{customerNumber}",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PATCH)
    ResponseEntity<Void> updateCustomerBasicData(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@Size(max=8) @ApiParam(value = "Customer Number",required=true) @PathVariable("customerNumber") String customerNumber,@ApiParam(value = "Customer Basic Data"  )  @Valid @RequestBody UpdateCustomerBasicDataRequest wsRequest);


    @ApiOperation(value = "Update Person Contact Data Request", nickname = "updateCustomerContactData", notes = "Updates a persons contact-data.", tags={ "CustomerContactData", })
    @ApiResponses(value = { 
        @ApiResponse(code = 204, message = "Customer Contact Data Updated Successfully!"),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Account not found"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/{customerEntity}-{customerNumber}/contacts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCustomerContactData(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@Size(max=8) @ApiParam(value = "Customer Number",required=true) @PathVariable("customerNumber") String customerNumber,@ApiParam(value = "Update Person Contact Data Request" ,required=true )  @Valid @RequestBody UpdateCustomerContactDataRequest wsRequest);


    @ApiOperation(value = "Update Person Economic Environment.", nickname = "updateCustomerEconomicEnvironment", notes = "Updates economic environment data of a person.", tags={ "CustomerEconomicEnvironment", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Person Economic Environment Updated Successfully!"),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Account not found"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/{customerEntity}-{customerNumber}/economicenvironment",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCustomerEconomicEnvironment(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@Size(max=8) @ApiParam(value = "Customer Number",required=true) @PathVariable("customerNumber") String customerNumber,@ApiParam(value = "Update Person Economic Environment Request" ,required=true )  @Valid @RequestBody UpdateCustomerEconomicEnvironmentRequest wsRequest);


    @ApiOperation(value = "Update Customer Household Calculation Data", nickname = "updateCustomerHouseholdCalculation", notes = "Updates the Customer household calculation data; Calls P051.", tags={ "CustomerHouseholdCalculation", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Household Calculation Updated Successfully!"),
        @ApiResponse(code = 400, message = "Application error - Verify the BAWAG specific headers for detailed information"),
        @ApiResponse(code = 404, message = "Account not found"),
        @ApiResponse(code = 500, message = "Business or technical error - See x-bawagpsk-errors header for detailed information") })
    @RequestMapping(value = "/customers/{customerEntity}-{customerNumber}/householdcalculation",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<Void> updateCustomerHouseholdCalculation(@Size(max=4) @ApiParam(value = "Entity of the Customer",required=true) @PathVariable("customerEntity") String customerEntity,@Size(max=8) @ApiParam(value = "Customer Number",required=true) @PathVariable("customerNumber") String customerNumber,@ApiParam(value = "Update Household Calculation Request" ,required=true )  @Valid @RequestBody UpdateCustomerHouseholdCalculationRequest wsRequest);

}
